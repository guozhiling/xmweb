jQuery.fn.jCountdown = function(opt){
	this.each(function(){
		var me = $(this),elem = this,inst = elem.jCountdown;
		var Styles = {
			'flip' : function(target) {
				var me = this;
                me._target = target;
                me._background = target.children(".text");
                me._width = 50;
                me._height = 64;
                me._frame = 1;
                me._totalFrames = 15;
                me._fps = 25;
                me._intervalId = -1;
                me._value = 0;
                me.stop = function() {
                    clearInterval(this._intervalId)
                };
                me.update = function(a) {
                	var me = this;
                    if (a) {
                        me.frame(1);
                        me.stop();
                        me._intervalId = setInterval(function() {
                            me._frame == me._totalFrames ? clearInterval(me._intervalId) : me.frame(me._frame + 1)
                        }, Math.ceil(1E3 / me._fps))
                    } else me.frame(me._totalFrames)
                };
                me.value = function(a, b) {
                    if (void 0 == a) return this._value;
                    this._value = a;
                    this.update(b)
                };
                me.destroy = function() {
                    this.stop();
                    this._background = this._target = null
                };
                me.frame = function(f) {
                    var me = this,a = -(9 - me._value) * me._width,b = -(f - 1) * me._height;
                    me._frame = f;
                    me._background.css("background-position", a + "px " + b + "px")
                };
                me.update(!1)
            },'slide' : function(target){
				var me = this;
                me._target = target;
                me._background = target.children(".text");
                me._width = 50;
                me._height = 64;
                me._frame = 1;
                me._totalFrames = 15;
                me._fps = 25;
                me._intervalId = -1;
                me._value = 0;
                me.stop = function() {
                    clearInterval(this._intervalId)
                };
                me.update = function(a) {
                	var me = this;
                    if (a) {
                        me.frame(1);
                        me.stop();
                        me._intervalId = setInterval(function() {
                            me._frame == me._totalFrames ? clearInterval(me._intervalId) : me.frame(me._frame + 1)
                        }, Math.ceil(1E3 / me._fps))
                    } else me.frame(me._totalFrames)
                };
                me.value = function(a, b) {
                    if (void 0 == a) return this._value;
                    this._value = a;
                    this.update(b)
                };
                me.destroy = function() {
                    this.stop();
                    this._target = this._background = null
                };
                me.frame = function(f) {
                    this._frame = f;
                    f = -((1 + this._value) * this._height) + Math.sin((f - 1) / (this._totalFrames - 1) * Math.PI / 2) * this._height;
                    this._background.css("background-position", "0px " + f + "px")
                };
                me.update(!1)
            },'metal' : function(target){
				var me = this;
                me._target = target;
                me._background = target.children(".text");
                me._cover = target.children(".cover");
                me._width = me._height = 60;
                me._frame = 1;
                me._totalFrames = 15;
                me._fps = 25;
                me._intervalId = -1;
                me._value = 0;
                me.stop = function() {
                    clearInterval(this._intervalId)
                };
                me.update = function(a) {
                	var me = this;
                    if (a) {
                        me.frame(1);
                        me.stop();
                        me._intervalId = setInterval(function() {
                            me._frame == me._totalFrames ? clearInterval(me._intervalId) : me.frame(me._frame + 1)
                        }, Math.ceil(1E3 / me._fps))
                    } else me.frame(me._totalFrames)
                };
                me.value = function(a, b) {
                    if (void 0 == a) return this._value;
                    this._value = a;
                    this.update(b)
                };
                me.destroy = function() {
                    this.stop();
                    this._target = this._background = me._cover = null
                };
                me.frame = function(f) {
                    this._frame = f;
                    f = this._value + 1;
                    9 < f && (f = 0);
                    var b = this._frame / this._totalFrames,c;
                    0.4 <= b && 0.6 >= b ? c = 0 : 0.4 >= b ? c = 1 - b / 0.4 : 0.6 <= b && (c = (b - 0.6) / 0.4);
                    f = -(0.5 < b ? this._value : f) * this._height;
                    f -= 3 * (1 - c);
                    this._background.css("background-position", "0px " + f + "px").css("opacity", c);
                    this._cover.css("opacity", c)
                };
                me.update(!1)
            },'crystal' :  function(target){
				var me = this;
                me._target = target;
                me._background = target.children(".text");
                me._width = me._height = 60;
                me._heightSmall = me._widthSmall = 42;
                me._frame = 1;
                me._totalFrames = 15;
                me._fps = 25;
                me._intervalId = -1;
                me._value = 0;
                me.stop = function() {
                    clearInterval(this._intervalId)
                };
                me.update = function(a) {
                	var me = this;
                    if (a) {
                        me.frame(1);
                        me.stop();
                        me._intervalId = setInterval(function() {
                            me._frame == me._totalFrames ? clearInterval(me._intervalId) : me.frame(me._frame + 1)
                        }, Math.ceil(1E3 / me._fps))
                    } else me.frame(me._totalFrames)
                };
                me.value = function(a, b) {
                    if (void 0 == a) return this._value;
                    this._value = a;
                    this.update(b)
                };
                me.destroy = function() {
                    this.stop();
                    this._target = this._background = null
                };
                me.frame = function(f) {
                    this._frame = f;
                    var a = -this._value * this._height,
                        b = Math.sin((f - 1) / (this._totalFrames - 1) * Math.PI / 2);
                    0 < b && 0.001 > b ? b = 0 : 0 > b && -0.001 < b && (b = 0);
                    this._background.css("background-position", "0px " + a + "px").css("opacity", b)
                };
                me.update(!1)
            }
		},countdown = function(elem){
                var $_days = [],$_hours = [],$_minutes = [],$_seconds = [],
                	$_tickId = -1,$_tickDelay = 100,$_endtime = null;

                this.onFinish = function() {};
                this.destroy = function() {
                    for (var b = $_days.length-1; b >= 0 ; --b){
                    	$_days[b].destroy();
                    	delete $_days[b];
                    }
                    for (b = $_hours.length-1; b >= 0 ; --b){
                    	$_hours[b].destroy();
                    	delete $_hours[b];
                    }
                    for (b = $_minutes.length-1; b >= 0 ; --b){
                    	$_minutes[b].destroy();
                    	delete $_minutes[b];
                    }
                    for (b = $_seconds.length-1; b >= 0 ; --b){
                    	$_seconds[b].destroy();
                    	delete $_seconds[b];
                    }
                    this.stop()
                };
                this.items = function(b, a, c, d) {
                    $_days = b;
                    $_hours = a;
                    $_minutes = c;
                    $_seconds = d
                };
                this.stop = function() {
                    for (var b = 0; b < $_days.length; b++) $_days[b].stop();
                    for (b = 0; b < $_hours.length; b++) $_hours[b].stop();
                    for (b = 0; b < $_minutes.length; b++) $_minutes[b].stop();
                    for (b = 0; b < $_seconds.length; b++) $_seconds[b].stop();
                    clearInterval($_tickId);
                	$_tickId = -1;
                };

                this.checkTime = function(b) {
                	if(!$_endtime)return false;
                    var left = $_endtime - (new Date().getTime()),n,m,a,days,hours,mins,secs;
                    if (left<=0) {
                        for (a = $_days.length-1; a >=0; --a) $_days[a].value(0);
                        for (a = $_hours.length-1; a >=0 ; --a) $_hours[a].value(0);
                        for (a = $_minutes.length-1; a >=0 ;--a) $_minutes[a].value(0);
                        for (a = $_seconds.length-1; a >=0 ; --a) $_seconds[a].value(0);
                        this.stop();
                        $_endtime = 0;
                        this.onFinish.call(elem);
                        return !0
                    }
                    left = Math.round(left/1000,0);
                    days = (Math.floor(left / 86400)+'').split("");
                    hours = (Math.floor(left % 86400 / 3600)+'').split("");
                    mins = (Math.floor(left % 3600 / 60)+'').split("");
                    secs = ((left % 60)+'').split("");

                    for (m = $_days.length-1,a=days.length-1; m >=0 ; --m,--a) {
                    	n = (a>=0?days[a]*1:0);
                        n != $_days[m].value() && $_days[m].value(n, b)
                    }
                    for (m = $_hours.length-1,a=hours.length-1; m >=0 ; --m,--a) {
                    	n = (a>=0?hours[a]*1:0);
                        n != $_hours[m].value() && $_hours[m].value(n, b)
                    }
                    for (m = $_minutes.length-1,a=mins.length-1; m >=0 ; --m,--a) {
                    	n = (a>=0?mins[a]*1:0);
                        n != $_minutes[m].value() && $_minutes[m].value(n, b)
                    }
                    for (m = $_seconds.length-1,a=secs.length-1; m >=0 ; --m,--a) {
                    	n = (a>=0?secs[a]*1:0);
                        n != $_seconds[m].value() && $_seconds[m].value(n, b)
                    }
                    return !1
                };

                this.start = function() {
                    this.stop();
                    for (var b = 0; b < $_days.length; b++) $_days[b].update();
                    for (b = 0; b < $_hours.length; b++) $_hours[b].update();
                    for (b = 0; b < $_minutes.length; b++) $_minutes[b].update();
                    for (b = 0; b < $_seconds.length; b++) $_seconds[b].update();
                    if (!this.checkTime(!1)) {
                        var a = this;
                        $_tickId = setInterval(function() {
                            a.checkTime(!0)
                        }, $_tickDelay)
                    }
                };

                this.time = function(counttime) {
                    counttime = counttime*1 || 0;
                    if(0 >= counttime){return false;}
                    $_endtime = new Date().getTime()+counttime;
                    $_tickId<0&&this.start()
                }
		},destroy = function() {
			if(inst){
				inst.destroy();
				delete elem.jCountdown;
				me.children().remove();
			}
		}
		if(!elem){
			return false;
		}else if("object" == typeof opt){
			inst = elem.jCountdown || new countdown(elem);
			elem.jCountdown = inst;
			var ieVer = (function(){var um = navigator.userAgent.match(/MSIE ([\d.]+)/);return um?um[1]*1:0}())*1,countLeft = parseFloat(opt.time),
				countStyle = (opt.style+'').toLowerCase(),
				countColor = (opt.color+'').toLowerCase(),
				// countWidth = parseInt(opt.width)||0,
				countGMar = parseInt(opt.textGroupSpace)||0,
				countMar = parseInt(opt.textSpace)||0,
				isReflec = !1 != opt.reflection,
				reflecOpac = parseFloat(opt.reflectionOpacity)||0,
				reflecBlur = parseInt(opt.reflectionBlur)||0,
				dayNum   = 2 < parseInt(opt.dayTextNumber, 10) ? parseInt(opt.dayTextNumber, 10) : 2,
				isDay    = !1 != opt.displayDay,
				isHour   = !1 != opt.displayHour,
				isMin    = !1 != opt.displayMinute,
				isSec    = !1 != opt.displaySecond,
				isLab    = !1 != opt.displayLabel,
				onFinish = "function" == typeof opt.onFinish ? opt.onFinish : function() {};
			isNaN(countLeft) && (countLeft = 0);
			if( 'metal' != countStyle &&
				'crystal' != countStyle &&
				'slide' != countStyle
			){
				countStyle = 'flip';
			}
			if('white' != countColor){
				countColor = 'black';
			}
			// countWidth>=10 || (countWidth = 0);
			0 <= countGMar || (countGMar = 15);
			0 < countMar   || (countMar = 0);
			reflecBlur>100&&(reflecBlur=100);
			reflecBlur<0&&(reflecBlur=10);

			var html='',f,s,m,h,j,Clss = [],_style = ("slide" == countStyle || "crystal" == countStyle || "metal" == countStyle)?'<div class="cover"></div>':'';
			isSec&&Clss.push('second');
			isMin&&Clss.push('minute');
			isHour&&Clss.push('hour');
			isDay&&Clss.push('day');
			for(m=0;m<Clss.length;++m){
				f = '<div class="group ' + Clss[m] + (m?'':' lastItem') + '" style="margin-right:'+(m?countGMar:'0')+'px;">';
				h = Clss[m]=='day'?dayNum:2;
				for (s = 1; s <= h; s++){
					f += '<div class="container';
					f += " item" + s + (s==h?" lastItem" : "");
					f += '" style="margin-right:'+(s!=h?countMar:'0')+'px;">'+_style+'<div class="text"></div></div>';
				}
				isLab && (f += '<div class="label"></div>');
				f += "</div>";
				html = f + html;
			}
			f = '<div class="jCountdown '+countStyle+' '+countColor+'">'+html+'</div>';

			if(isReflec && (!ieVer||ieVer>9)){
				f += '<div class="jCountdown '+countStyle+' '+countColor+' reflection '+(isLab?'displayLabel':'')+(blur?"blur" + blur:'')+(reflecOpac<100?'" style="opacity:'+(reflecOpac/100)+';':'')+'">'+html+'</div>'
			}
			// if(countWidth){
			// 	//缩放处理
			// 	f = '<div class="jCountdownScale">'+f+'</div>';
			// }
			me.empty().html('<div class="jCountdownContainer">'+f+'</div>');
			Clss = Styles[countStyle];
			s=[];m=[];h=[];f=[];
			j=".container.item";
			html = me.find('.group.day');
			_style = 1;
			for (;html.find(j + _style).length;)f.push(new Clss(html.find(j + _style))), _style++;
			html = me.find('.group.hour');
			_style = 1;
			for (;html.find(j + _style).length;)h.push(new Clss(html.find(j + _style))), _style++;
			html = me.find('.group.minute');
			_style = 1;
			for (;html.find(j + _style).length;)m.push(new Clss(html.find(j + _style))), _style++;
			html = me.find('.group.second');
			_style = 1;
			for (;html.find(j + _style).length;)s.push(new Clss(html.find(j + _style))), _style++;
			inst.items(f, h, m, s);
			inst.onFinish = onFinish;
			inst.time(countLeft);
		}else if("string" == typeof opt){
			if(typeof inst != 'undefined' ){
			switch (opt){
				case "stop":
					inst.stop();
					break;
				case "start":
					inst.start();
					break;
				case "destroy":
					destroy();
					break;
				}
			}
		}
	});
	return this;
}